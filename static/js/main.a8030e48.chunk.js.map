{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api.ts","components/FindMovie/FindMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","getMovie","query","fetch","then","res","json","catch","Response","Error","FindMovie","onAddMovies","setMovies","useState","setQuery","setMovie","isLoading","setIsLoading","errorMessage","setErrorMessage","isError","a","undefined","normalizedMovie","data","Title","Plot","Poster","imdbID","fetchData","onSubmit","event","preventDefault","htmlFor","type","id","placeholder","value","onChange","e","handleQuery","target","classNames","onClick","disabled","isMovieInList","find","existMovie","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a8030e48.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'http://www.omdbapi.com/?apikey=86729a9e';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import classNames from 'classnames';\nimport React, { Dispatch, SetStateAction, useState } from 'react';\nimport { getMovie } from '../../api';\nimport { Movie } from '../../types/Movie';\nimport { MovieData } from '../../types/MovieData';\nimport { ResponseError } from '../../types/ReponseError';\nimport { MovieCard } from '../MovieCard';\nimport './FindMovie.scss';\n\ntype Props = {\n  onAddMovies: Movie[]\n  setMovies: Dispatch<SetStateAction<Movie[]>>\n};\n\nexport const FindMovie: React.FC<Props> = ({ onAddMovies, setMovies }) => {\n  const [query, setQuery] = useState<string>('');\n  const [movie, setMovie] = useState<Movie | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(false);\n\n  function isError(a: MovieData | ResponseError): a is ResponseError {\n    return (a as ResponseError).Error !== undefined;\n  }\n\n  const normalizedMovie = (data: MovieData): Movie => {\n    return (\n      {\n        title: data.Title,\n        description: data.Plot,\n        imgUrl: data.Poster !== 'N/A'\n          ? data.Poster\n          : 'https://via.placeholder.com/360x270.png?text=no%20preview',\n        imdbUrl: `https://www.imdb.com/title/${data.imdbID}`,\n        imdbId: data.imdbID,\n      }\n    );\n  };\n\n  const fetchData = async () => {\n    setIsLoading(true);\n    const data = await getMovie(query);\n    // const x = isError(data);\n\n    // console.log(query);\n    // console.log('TRUE OR FALSE with isError', x);\n    setErrorMessage(isError(data));\n    if (!isError(data)) {\n      setMovie(normalizedMovie(data));\n    }\n\n    setIsLoading(false);\n  };\n\n  const handleQuery = (e: string) => {\n    setErrorMessage(false);\n    setQuery(e);\n  };\n\n  const handleFindMovie = () => {\n    fetchData();\n  };\n\n  const handleAddToList = () => {\n    setQuery('');\n\n    const isMovieInList = onAddMovies\n      .find(existMovie => existMovie.imdbId === movie?.imdbId);\n\n    setMovies(movie && !isMovieInList\n      ? (a: Movie[]) => [...a, movie] : onAddMovies);\n\n    setMovie(null);\n  };\n\n  // console.log(movie);\n\n  return (\n    <>\n      <form className=\"find-movie\" onSubmit={event => event.preventDefault()}>\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-dander\"\n              value={query}\n              onChange={(e) => handleQuery(e.target.value)}\n            />\n          </div>\n\n          {errorMessage\n          && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classNames(\n                'button is-light',\n                { 'is-loading': isLoading },\n              )}\n              onClick={handleFindMovie}\n              disabled={!query}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          {movie\n          && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={handleAddToList}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      {movie\n      && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={movie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie\n          onAddMovies={movies}\n          setMovies={setMovies}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}